{
    "docs": [
        {
            "location": "/",
            "text": "Triage\n\u00b6\n\n\nRisk modeling and prediction\n\n\n\n\n\n\n\n\nPredictive analytics projects require the coordination of many different tasks, such as feature generation, classifier training, evaluation, and list generation. These tasks are complicated in their own right, but in addition have to be combined in different ways throughout the course of the project. \n\n\nTriage aims to provide interfaces to these different phases of a project, such as an \nExperiment\n. Each phase is defined by configuration specific to the needs of the project, and an arrangement of core data science components that work together to produce the output of that phase.\n\n\nThe first phase implemented in triage is the \nExperiment\n. An experiment represents the initial research work of creating design matrices from source data, and training/testing/evaluating a model grid on those matrices. At the end of the experiment, a relational database with results metadata is populated, allowing for evaluation by the researcher.\n\n\nRunning an Experiment\n\u00b6\n\n\nRunning an Experiment\n\n\nBackground\n\u00b6\n\n\nTriage is developed at the University of Chicago's \nCenter For Data Science and Public Policy\n. We created it in response to commonly occuring challenges we've encountered and patterns we've developed while working on projects for our partners.\n\n\nMajor Components Used by Triage\n\u00b6\n\n\nTriage makes use of many core data science components developed at DSaPP. These components can be useful in their own right, and are worth checking out if \n\n\n\n\nArchitect\n: Plan, design and build train and test matrices. Includes feature and label generation.\n\n\nCollate\n: Aggregation SQL Query Builder. This is used by the Architect to build features.\n\n\nTimechop\n: Generate temporal cross-validation time windows for matrix creation\n\n\nMetta-Data\n: Train and test matrix storage\n\n\nCatwalk\n: Training, testing, and evaluating machine learning classifier models\n\n\nResults Schema\n: Generate a database schema suitable for storing the results of modeling runs\n\n\n\n\nDesign Goals\n\u00b6\n\n\nThere are two overarching design goals for Triage:\n\n\n\n\n\n\nAll configuration necessary to run the full experiment from the external interface (ie, Experiment subclasses) from beginning to end must be easily serializable and machine-constructable, to allow the eventual development of tools for users to design experiments. \n\n\n\n\n\n\nAll core functionality must be usable outside of a specific pipeline context or workflow manager. There are many good workflow managers; everybody has their favorite, and core functionality should not be designed to work with specific execution expectations.\n\n\n\n\n\n\nFuture Plans\n\u00b6\n\n\n\n\nGeneration and Management of lists (ie for inspections) by various criteria\n\n\nIntegration of components with various workflow managers, like \nDrain\n and \nLuigi\n.\n\n\nComprehensive leakage testing of an experiment's modeling run\n\n\nFeature Generation Wizard",
            "title": "Home"
        },
        {
            "location": "/#triage",
            "text": "Risk modeling and prediction     Predictive analytics projects require the coordination of many different tasks, such as feature generation, classifier training, evaluation, and list generation. These tasks are complicated in their own right, but in addition have to be combined in different ways throughout the course of the project.   Triage aims to provide interfaces to these different phases of a project, such as an  Experiment . Each phase is defined by configuration specific to the needs of the project, and an arrangement of core data science components that work together to produce the output of that phase.  The first phase implemented in triage is the  Experiment . An experiment represents the initial research work of creating design matrices from source data, and training/testing/evaluating a model grid on those matrices. At the end of the experiment, a relational database with results metadata is populated, allowing for evaluation by the researcher.",
            "title": "Triage"
        },
        {
            "location": "/#running-an-experiment",
            "text": "Running an Experiment",
            "title": "Running an Experiment"
        },
        {
            "location": "/#background",
            "text": "Triage is developed at the University of Chicago's  Center For Data Science and Public Policy . We created it in response to commonly occuring challenges we've encountered and patterns we've developed while working on projects for our partners.",
            "title": "Background"
        },
        {
            "location": "/#major-components-used-by-triage",
            "text": "Triage makes use of many core data science components developed at DSaPP. These components can be useful in their own right, and are worth checking out if    Architect : Plan, design and build train and test matrices. Includes feature and label generation.  Collate : Aggregation SQL Query Builder. This is used by the Architect to build features.  Timechop : Generate temporal cross-validation time windows for matrix creation  Metta-Data : Train and test matrix storage  Catwalk : Training, testing, and evaluating machine learning classifier models  Results Schema : Generate a database schema suitable for storing the results of modeling runs",
            "title": "Major Components Used by Triage"
        },
        {
            "location": "/#design-goals",
            "text": "There are two overarching design goals for Triage:    All configuration necessary to run the full experiment from the external interface (ie, Experiment subclasses) from beginning to end must be easily serializable and machine-constructable, to allow the eventual development of tools for users to design experiments.     All core functionality must be usable outside of a specific pipeline context or workflow manager. There are many good workflow managers; everybody has their favorite, and core functionality should not be designed to work with specific execution expectations.",
            "title": "Design Goals"
        },
        {
            "location": "/#future-plans",
            "text": "Generation and Management of lists (ie for inspections) by various criteria  Integration of components with various workflow managers, like  Drain  and  Luigi .  Comprehensive leakage testing of an experiment's modeling run  Feature Generation Wizard",
            "title": "Future Plans"
        },
        {
            "location": "/experiments/defining/",
            "text": "Defining an Experiment\n\u00b6\n\n\nThis doc is coming soon. In the meantime, check out the \nExample Experiment Definition\n for an overview of the different sections of an experiment definition.",
            "title": "Defining an Experiment"
        },
        {
            "location": "/experiments/defining/#defining-an-experiment",
            "text": "This doc is coming soon. In the meantime, check out the  Example Experiment Definition  for an overview of the different sections of an experiment definition.",
            "title": "Defining an Experiment"
        },
        {
            "location": "/experiments/running/",
            "text": "Running an Experiment\n\u00b6\n\n\nPrerequisites\n\u00b6\n\n\nTo use a Triage experiment, you first need:\n\n\n\n\nPython 3.5\n\n\nA PostgreSQL database with your source data (events, geographical data, etc) loaded.\n\n\nAmple space on an available disk (or S3) to store the needed matrices and models for your experiment\n\n\nAn experiment definition (see \nDefining an Experiment\n)\n\n\n\n\nExperiment Run Example\n\u00b6\n\n\nThe basic execution of an experiment looks something like the following:\n\n\n    SingleThreadedExperiment(\n        config=experiment_config,\n        db_engine=sqlalchemy.create_engine(...),\n        model_storage_class=FSModelStorageEngine,\n        project_path='/path/to/directory/to/save/data'\n    ).run()\n\n\n\n\nThese lines are a bit dense: what is happening here?\n\n\n\n\nSingleThreadedExperiment\n:  There are different Experiment classes available in \ntriage.experiments\n to use, and they each represent a different way of executing the experiment, which we'll talk about in more detail later. The simplest (but slowest) is the SingleThreadedExperiment.\n\n\nconfig=experiment_config\n: The bulk of the work needed in designing an experiment will be in creating this experiment configuration. An up-to-date example is at \nexample_experiment_config.yaml\n; more detailed instructions on each section are located in the example file. Generally these would be easiest to store as a file (or multiple files that you construct together) like that YAML file, but the configuration is passed in dict format to the Experiment constructor and you can store it however you wish.\n\n\ndb_engine=sqlalchemy.create_engine(...)\n: A SQLAlchemy database engine. This will be used both for querying your source tables and writing results metadata.\n\n\nmodel_storage_class=FSModelStorageEngine\n: The path to a model storage engine class. The library that triage uses for model training and evaluation, \ncatwalk\n, provides multiple classes that handle storing trained models in different mediums, such as on the local filesystem or Amazon S3. We recommend starting with the \ncatwalk.storage.FSModelStorageEngine\n to save models on the local filesystem.\n\n\nproject_path='/path/to/directory/to/save/data'\n: The path to where you would like to store design matrices and trained models.\n\n\n\n\nWith that in mind, a more full version of the experiment run script might look like this:\n\n\nimport sqlalchemy\nimport yaml\n\nfrom catwalk.storage import FSModelStorageEngine\nfrom triage.experiments import SingleThreadedExperiment\n\nwith open('my_experiment_config.yaml') as f:\n    experiment_config = yaml.load(f)\nwith open('my_database_creds') as f:\n    db_connection_string = yaml.load(f)['db_connection_string']\n\nexperiment = SingleThreadedExperiment(\n    config=experiment_config,\n    db_engine=sqlalchemy.create_engine(db_connection_string),\n    model_storage_class=FSModelStorageEngine,\n    project_path='/home/research/myproject'\n)\n\nexperiment.run()\n\n\n\n\nEvaluating results of an Experiment\n\u00b6\n\n\nAfter the experiment run, a results schema will be created and populated in the configured database with the following tables:\n\n\n\n\nexperiments - The experiment configuration and a hash\n\n\nmodels - A model describes a trained classifier; you'll have one row for each trained file that gets saved.\n\n\nmodel_groups - A model groups refers to all models that share parameters like classifier type, hyperparameters, etc, but \nhave different training windows\n. Look at these to see how classifiers perform over different training windows.\n\n\nfeature_importances - The sklearn feature importances results for each trained model\n\n\npredictions - Prediction probabilities for entities generated against trained models\n\n\nevaluations - Metric scores of trained models over given testing windows\n\n\n\n\nHere's an example query, which returns the top 10 model groups by precision at the top 100 entities:\n\n\nselect\n    model_groups.model_group_id,\n    model_groups.model_type,\n    model_groups.model_parameters,\n    max(evaluations.value) as max_precision\nfrom model_groups\n    join models using (model_group_id)\n    join evaluations using (model_id)\nwhere\n    metric = 'precision@'\n    and parameter = '100_abs'\ngroup by 1,2,3\norder by 4 desc\nlimit 10\n\n\n\n\nThe resulting schema is also readable by \nTyra\n, our model evaluation webapp.\n\n\nRestarting an Experiment\n\u00b6\n\n\nIf an experiment fails for any reason, you can restart it. Each matrix and each model file is saved with a filename matching a hash of its unique attributes, so when the experiment is rerun, it will by default reuse the matrix or model instead of rebuilding it. If you would like to change this behavior and replace existing versions of matrices and models, set \nreplace=True\n in the Experiment constructor.\n\n\nInspecting an Experiment before running\n\u00b6\n\n\nBefore you run an experiment, you can inspect properties of the Experiment object to ensure that it is configured in the way you want. Some examples:\n\n\n\n\nexperiment.all_as_of_times\n for debugging temporal config. This will show all dates that features and labels will be calculated at.\n\n\nexperiment.feature_dicts\n will output a list of feature dictionaries, representing the feature tables and columns configured in this experiment\n\n\nexperiment.matrix_build_tasks\n will output a list representing each matrix that will be built.\n\n\n\n\nExperiment Classes\n\u00b6\n\n\n\n\nSingleThreadedExperiment\n: An experiment that performs all tasks serially in a single thread. Good for simple use on small datasets, or for understanding the general flow of data through a pipeline.\n\n\nMultiCoreExperiment\n: An experiment that makes use of the multiprocessing library to parallelize various time-consuming steps. Takes an \nn_processes\n keyword argument to control how many workers to use.",
            "title": "Running an Experiment"
        },
        {
            "location": "/experiments/running/#running-an-experiment",
            "text": "",
            "title": "Running an Experiment"
        },
        {
            "location": "/experiments/running/#prerequisites",
            "text": "To use a Triage experiment, you first need:   Python 3.5  A PostgreSQL database with your source data (events, geographical data, etc) loaded.  Ample space on an available disk (or S3) to store the needed matrices and models for your experiment  An experiment definition (see  Defining an Experiment )",
            "title": "Prerequisites"
        },
        {
            "location": "/experiments/running/#experiment-run-example",
            "text": "The basic execution of an experiment looks something like the following:      SingleThreadedExperiment(\n        config=experiment_config,\n        db_engine=sqlalchemy.create_engine(...),\n        model_storage_class=FSModelStorageEngine,\n        project_path='/path/to/directory/to/save/data'\n    ).run()  These lines are a bit dense: what is happening here?   SingleThreadedExperiment :  There are different Experiment classes available in  triage.experiments  to use, and they each represent a different way of executing the experiment, which we'll talk about in more detail later. The simplest (but slowest) is the SingleThreadedExperiment.  config=experiment_config : The bulk of the work needed in designing an experiment will be in creating this experiment configuration. An up-to-date example is at  example_experiment_config.yaml ; more detailed instructions on each section are located in the example file. Generally these would be easiest to store as a file (or multiple files that you construct together) like that YAML file, but the configuration is passed in dict format to the Experiment constructor and you can store it however you wish.  db_engine=sqlalchemy.create_engine(...) : A SQLAlchemy database engine. This will be used both for querying your source tables and writing results metadata.  model_storage_class=FSModelStorageEngine : The path to a model storage engine class. The library that triage uses for model training and evaluation,  catwalk , provides multiple classes that handle storing trained models in different mediums, such as on the local filesystem or Amazon S3. We recommend starting with the  catwalk.storage.FSModelStorageEngine  to save models on the local filesystem.  project_path='/path/to/directory/to/save/data' : The path to where you would like to store design matrices and trained models.   With that in mind, a more full version of the experiment run script might look like this:  import sqlalchemy\nimport yaml\n\nfrom catwalk.storage import FSModelStorageEngine\nfrom triage.experiments import SingleThreadedExperiment\n\nwith open('my_experiment_config.yaml') as f:\n    experiment_config = yaml.load(f)\nwith open('my_database_creds') as f:\n    db_connection_string = yaml.load(f)['db_connection_string']\n\nexperiment = SingleThreadedExperiment(\n    config=experiment_config,\n    db_engine=sqlalchemy.create_engine(db_connection_string),\n    model_storage_class=FSModelStorageEngine,\n    project_path='/home/research/myproject'\n)\n\nexperiment.run()",
            "title": "Experiment Run Example"
        },
        {
            "location": "/experiments/running/#evaluating-results-of-an-experiment",
            "text": "After the experiment run, a results schema will be created and populated in the configured database with the following tables:   experiments - The experiment configuration and a hash  models - A model describes a trained classifier; you'll have one row for each trained file that gets saved.  model_groups - A model groups refers to all models that share parameters like classifier type, hyperparameters, etc, but  have different training windows . Look at these to see how classifiers perform over different training windows.  feature_importances - The sklearn feature importances results for each trained model  predictions - Prediction probabilities for entities generated against trained models  evaluations - Metric scores of trained models over given testing windows   Here's an example query, which returns the top 10 model groups by precision at the top 100 entities:  select\n    model_groups.model_group_id,\n    model_groups.model_type,\n    model_groups.model_parameters,\n    max(evaluations.value) as max_precision\nfrom model_groups\n    join models using (model_group_id)\n    join evaluations using (model_id)\nwhere\n    metric = 'precision@'\n    and parameter = '100_abs'\ngroup by 1,2,3\norder by 4 desc\nlimit 10  The resulting schema is also readable by  Tyra , our model evaluation webapp.",
            "title": "Evaluating results of an Experiment"
        },
        {
            "location": "/experiments/running/#restarting-an-experiment",
            "text": "If an experiment fails for any reason, you can restart it. Each matrix and each model file is saved with a filename matching a hash of its unique attributes, so when the experiment is rerun, it will by default reuse the matrix or model instead of rebuilding it. If you would like to change this behavior and replace existing versions of matrices and models, set  replace=True  in the Experiment constructor.",
            "title": "Restarting an Experiment"
        },
        {
            "location": "/experiments/running/#inspecting-an-experiment-before-running",
            "text": "Before you run an experiment, you can inspect properties of the Experiment object to ensure that it is configured in the way you want. Some examples:   experiment.all_as_of_times  for debugging temporal config. This will show all dates that features and labels will be calculated at.  experiment.feature_dicts  will output a list of feature dictionaries, representing the feature tables and columns configured in this experiment  experiment.matrix_build_tasks  will output a list representing each matrix that will be built.",
            "title": "Inspecting an Experiment before running"
        },
        {
            "location": "/experiments/running/#experiment-classes",
            "text": "SingleThreadedExperiment : An experiment that performs all tasks serially in a single thread. Good for simple use on small datasets, or for understanding the general flow of data through a pipeline.  MultiCoreExperiment : An experiment that makes use of the multiprocessing library to parallelize various time-consuming steps. Takes an  n_processes  keyword argument to control how many workers to use.",
            "title": "Experiment Classes"
        },
        {
            "location": "/experiments/temporal-validation/",
            "text": "Temporal Validation Deep Dive\n\u00b6\n\n\nThis doc is coming soon.",
            "title": "Temporal Validation Deep Dive"
        },
        {
            "location": "/experiments/temporal-validation/#temporal-validation-deep-dive",
            "text": "This doc is coming soon.",
            "title": "Temporal Validation Deep Dive"
        },
        {
            "location": "/experiments/features/",
            "text": "Experiment Features Deep Dive\n\u00b6\n\n\nThis doc is coming soon",
            "title": "Feature Definition Deep Dive"
        },
        {
            "location": "/experiments/features/#experiment-features-deep-dive",
            "text": "This doc is coming soon",
            "title": "Experiment Features Deep Dive"
        },
        {
            "location": "/experiments/algorithm/",
            "text": "Experiment Algorithm Deep Dive\n\u00b6\n\n\nThis guide's purpose is to provide familiarity of the inner workings of a Triage Experiment to people with some experience in data science and Python. A Triage Experiment is a highly structured way of defining the experimentation phase of a data science project. To those wondering whether this Experiment structure is flexible enough to fit their needs, this should help.\n\n\n1. Temporal Validation Setup\n\u00b6\n\n\nFirst, the given \ntemporal_config\n section in the experiment definition is transformed into train and test splits, including \nas_of_times\n for each matrix.\n\n\nWe create these splits by figuring out the latest reasonable split time from the inputs, and moving backwards in time at the rate of the given \nmodel_update_frequency\n, until we get to the earliest reasonable split time.\n\n\nFor each split, we create \nas_of_times\n by moving either backwards from the split time towards the \nmax_training_history\n (for train matrices) or forwards from the split time towards the \ntest_duration\n (for test matrices) at the provided \ndata_frequency\n.\n\n\nMany of these configured values may be lists, in which case we generated the cross-product of all the possible values and generate more splits.\n\n\nFor a more detailed look at the temporal validation logic, see \nTemporal Validation Deep Dive\n.\n\n\nThe train and test splits themselves are not used until the \nBuilding Matrices\n section, but a flat list of all computed \nas_of_times\n for all matrices needed in the experiment is used in the next section, \nTransforming Data\n.\n\n\n2. Transforming Data\n\u00b6\n\n\nWith all of the \nas_of_times\n for this Experiment now computed, it's now possible to transform the input data into features and labels as of all the required times.\n\n\nLabels\n\u00b6\n\n\nThe Experiment transforms event outcomes data from the \nevents_table\n into a binary labels table. It does this assuming that, if any event outcome within a given \nlabel_timespan\n after a given \nas_of_time\n is true, that \nas_of_time\n will be assigned it a true label.\n\n\nThis binary labels table is scoped to the entire Experiment, so all \nas_of_time\n (computed in step 1) and \nlabel_timespan\n (taken straight from \ntemporal_config\n) combinations are present. Individual matrices will just select what they need from this table.\n\n\nState Table\n\u00b6\n\n\nThe Experiment keeps track of what states any given entities are in to, based on configuration, include only certain entities for different time periods in matrices and in imputation.\n\n\nIn code, it does this by computing what it calls the 'sparse' state table for an experiment. This is a table with a boolean flag entry for every entity, as_of_time, and state. The structure of this table allows for state filtering based on SQL conditions given by the user.\n\n\nBased on configuration, it can get created through one of two code paths:\n\n\n\n\n\n\nIf the user passes what we call a 'dense states' table, with the following structure: entity id/state/start/end, and a list of state filters. This 'dense states' table basically holds time ranges that entities were in specific states. When converting this to a sparse table, we take each as_of_time present in the Experiment, and for each known state (that is, the distinct values found in the 'dense states' table), see if there is any entry in the dense states table with this state whose range overlaps this as_of_time. If so, the entity is considered to be in that state as of that date.\n\n\n\n\n\n\nIf the user doesn't pass a dense states table, we use the events table to create a default one. It will simply use all entities present in the events table, and mark them as 'active' for every as_of_time in the experiment.\n\n\n\n\n\n\nThis table is created and exists until matrices are built, at which point it is considered unnecessary and then dropped.\n\n\nFeatures\n\u00b6\n\n\nEach provided \nfeature_aggregation\n configures the creation and population of several feature tables in the 'features' schema: one for each of the groups specified in the config, one that merges the groups together into one table, and one that fills in null values from the merged table with imputed values based on imputation config.\n\n\nGenerating Aggregation SQL\n\u00b6\n\n\nTo generate the SQL that creates the pre-imputation table, the Experiment assembles building blocks from the feature aggregation config, as well as the experiment's list of \nas_of_times\n:\n\n\n\n\nfrom_obj\n represents, well, the object of the FROM clause in the SQL query. Often this is just a table, but can be configured to be a subquery. This holds all the data that we want to aggregate into features\n\n\nEach \nas_of_time\n in the experiment and \ninterval\n in the \nfeature_aggregation\n is combined with the \nknowledge_date_column\n to create a WHERE clause representing a valid window of events to aggregate in the \nfrom_obj\n: e.g (\nwhere {knowledge_date_column} >= {as_of_time} - interval {interval}\n)\n\n\nEach \naggregate\n, \ncategorical\n, or \narray_categorical\n represents a SELECT clause. For aggregates, the \nquantity\n is a column or SQL expression representing a numeric quantity present in the \nfrom_obj\n, and the \nmetrics\n are any number of aggregate functions we want to use. The aggregate function is applied to the quantity.\n\n\nEach \ngroup\n is a column applied to the GROUP BY clause. Generally this is 'entity_id', but higher-level groupings (for instance, 'zip_code') can be used as long as they can be rolled up to 'entity_id'.\n\n\n\n\nSo a simplified version of a typical query would look like:\n\n\nSELECT {group}, {metric}({quantity})\nFROM {from_obj}\nWHERE {knowledge_date_column} >= {as_of_time} - interval {interval}\nGROUP BY {group}\n\n\n\n\nWriting Group-wide Feature Tables\n\u00b6\n\n\nFor each \nas_of_time\n, the results from the generated query are written to a table whose name is prefixed with the \nprefix\n, and suffixed with the \ngroup\n. For instance, if the configuration specifies zipcode-level aggregates and entity-level aggregates, there will be a table for each, keyed on its group plus the as_of_date. \n\n\nMerging into Aggregation-wide Feature Tables\n\u00b6\n\n\nEach generated group table is combined into one representing the whole aggregation with a left join. Given that the groups originally came from the same table (the \nfrom_obj\n of the aggregation) and therefore we know the zipcode for each entity, what we do now is create a table that would be keyed on entity and as_of_date, and contain all entity-level and zipcode-level aggregates from both tables. This aggregation-level table represents all of the features in the aggregation, pre-imputation. Its output location is generally \n{prefix}_aggregation\n\n\nImputing Values\n\u00b6\n\n\nA table that looks similar, but with imputed values is created. The state table from above is passed into collate as the comprehensive set of entities and dates for which output should be generated, regardless if they exist in the \nfrom_obj\n. Each feature column has an imputation rule, inherited from some level of the feature definition. The imputation rules that are based on data (e.g. \nmean\n) use the rows from the \nas_of_time\n to produce the imputed value. Its output location is generally \n{prefix}_aggregation_imputed\n\n\nRecap\n\u00b6\n\n\nAt this point, we have at least three tables that are used to populate matrices:\n\n\n\n\nlabels\n with computed labels\n\n\ntmp_states_{experiment hash}\n that tracks what \nas_of_times\n each entity was in each state.\n\n\nA \nfeatures.{prefix}_aggregation_imputed\n table for each feature aggregation present in the experiment config.\n\n\n\n\n3. Building Matrices\n\u00b6\n\n\nAt this point, we have to build actual train and test matrices that can be processed by machine learning algorithms.\n\n\nBut to do this, we have to figure out exactly what matrices we have to build. The split definitions from step 1 are a good start -- they are our train and test splits -- but sometimes we also want to test different subsets of the data, like feature groups (e.g. 'how does using group of features A perform against using all features?'). So there's a layer of iteration we introduce for each split, that may produce many more matrices.\n\n\nWhat do we iterate over?\n\n Feature List - All subsets of features that the user wants to cycle through. This is the end result of the feature group generation and mixing process, which is described more below.\n\n States - All configured \nstate_filters\n in the experiment config. These take the form of boolean SQL clauses that are applied to the sparse states table, and the purpose of this is to test different cohorts against each other. Generally there is just one here.\n\n Label names - In theory we can take in different labels (e.g. complaints, sustained complaints) in the same experiment. Right now this isn't done, there is one label name and it is 'outcome'.\n\n Label types - In theory we can take in different label types (e.g. binary) in the same experiment. Right now this isn't done, there is one label type and it is 'binary'.\n\n\nFeature Lists\n\u00b6\n\n\nHow do we arrive at the feature lists? There are two pieces of config that are used: \nfeature group_definition\n and \nfeature_group_strategies\n. Feature group definitions are just ways to define logical blocks of features, most often features that come from the same source, or describing a particular type of event. These groups within the experiment as a list of feature names, representing some subset of all potential features for the experiment. Feature group strategies are ways to take feature groups and mix them together in various ways. The feature group strategies take these subsets of features and convert them into another list of subsets of features, which is the final list iterated over to create different matrices.\n\n\nFeature Group Definition\n\u00b6\n\n\nFeature groups, at present, can be defined as either a \nprefix\n (the prefix of the feature name), a \ntable\n (the feature table that the feature resides in), or \nall\n (all features).  Each argument is passed as a list, and each entry in the list is interpreted as a group. So, a feature group config of \n{'table': ['complaints_aggregate_imputed', 'incidents_aggregate_imputed']}\n would result in two feature groups: one with all the features in \ncomplaints_aggregate_imputed\n, and one with all the features in \nincidents_aggregate_imputed\n. Note that this requires a bit of knowledge on the user's part of how the feature table names will be constructed.\n\n\nprefix\n works on the prefix of the feature name as it exists in the database. So this also requires some knowledge of how these get created. The general format is: \n{aggregation_prefix}_{group}_{timeperiod}_{quantity}\n, so with some knowledge the user can create groups with the aggregation's configured prefix (common), or the aggregations configured prefix + group (in case they want to compare, for instance, zip-code level features versus entity level features). \n\n\nall\n, with a single value of \nTrue\n, will include a feature group with all defined features. If no feature group definition is sent, this is the default.\n\n\nEither way, at the end of this process the experiment will be aware of some list of feature groups, even if the list is just length 1 with all features as one group.\n\n\nFeature Group Mixing\n\u00b6\n\n\nA few basic feature group mixing strategies are implemented: \nleave-one-in\n, \nleave-one-out\n, and \nall\n. These are sent in the experiment definition as a list, so different strategies can be tried in the same experiment. Each included strategy will be applied to the list of feature groups from the previous step, to convert them into\n\n\nFor instance, 'leave-one-in' will cycle through each feature group, and for each one create a list of features that just represents that feature group, so for some matrices we would only use features from that particular group. \nleave-one-out\n does the opposite, for each feature group creating a list of features that includes all other feature groups but that one. \nall\n just creates a list of features that represents all feature groups together.\n\n\nIteration and Matrix Creation\n\u00b6\n\n\nAt this point, matrices are created by looping through all train/test splits and data subsets (e.g. feature groups, state definitions), grabbing the data corresponding to each from the database, and assembling that data into a design matrix that is saved along with the metadata that defines it.\n\n\nAs an example, if the experiment defines 3 train/test splits (one test per train in this example, for simplicity), 3 feature groups that are mixed using the 'leave-one-out' and 'all' strategies, and 1 state definition, we'll expect 18 matrices to be saved: 9 splits after multiplying the time splits by the feature groups, and each one creating a train and test matrix.\n\n\nRetrieving Data and Saving Completed Matrix\n\u00b6\n\n\nHow do we get the data for an individual matrix out of the database?\n\n\n\n\n\n\nCreate an entity-date table for this specific matrix. If it is a test matrix, the table is made up of all valid entity dates. These dates come from the entity-date-state table for the experiment, filtered down to the entity-date pairs that match both \nthe state filter and the list of as-of-dates for this matrix\n. If it is a train matrix, the table is made up of all valid \nand labeled\n entity dates. The same valid filter used in test matrices applies, but it also joins with the labels table for this experiment on the label name, label type, and label timespan to filter out unlabeled examples.\n\n\n\n\n\n\nWrite features data from tables to disk in CSV format using a COPY command, table by table. Each table is joined with the matrix-specific entity-date table to only include the desired rows.\n\n\n\n\n\n\nWrite labels data to disk in CSV format using a COPY command. It is joined with the matrix-specific entity-date table to only include the desired rows.\n\n\n\n\n\n\nMerge the features and labels CSV files horizontally, in pandas. They are expected to be of the same shape, which is enforced by the entity-date table. The resulting matrix is indexed on \nentity_id\n and \nas_of_date\n, and then saved to disk (in CSV format, more formats to come) along with its metadata: time, feature, label, index, and state information. along with any user metadata the experiment config specified. The filename is decided by a hash of this metadata, and the metadata is saved in a YAML file with the same hash and directory.\n\n\n\n\n\n\nMatrix metadata reference:\n- \nTrain matrix temporal info\n\n- \nTest matrix temporal info\n\n- \nFeature, label, index, state, user metadata\n\n\nRecap\n\u00b6\n\n\nAt this point, all finished matrices and metadata will be saved under the \nproject_path\n supplied by the user to the Experiment constructor, in the subdirectory \nmatrices\n.\n\n\n4. Running Models\n\u00b6\n\n\nThe last phase of an Experiment run uses the completed design matrices to train, test, and evaluate classifiers. This procedure writes a lot of metadata to the 'results' schema.\n\n\nTrain\n\u00b6\n\n\nEach matrix marked for training is sent through the configured grid in the experiment's \ngrid_config\n. This works much like the scikit-learn \nParameterGrid\n (and in fact uses it on the backend). It cycles through all of the classifiers and hyperparameter combinations contained herein, and calls \n.fit()\n with that train matrix. Any classifier that adheres to the scikit-learn \n.fit/.transform\n interface and is available in the Python environment will work here, whether it is a standard scikit-learn classifier, a third-party library like XGBoost, or a custom-built one in the calling repository (for instance, one that implements the problem domain's baseline heuristic algorithm for comparison).  Metadata about the trained classifier is written to the \nresults.models\n Postgres table. The trained model is saved to a filename with the model hash (see Model Hash section below).\n\n\nModel Groups\n\u00b6\n\n\nEach model is assigned a 'model group'. A model group represents a number of trained classifiers that we want to treat as equivalent by some criteria. By default, this is aimed at defining models which are equivalent across time splits, to make analyzing model stability easier. The experiment defines model groups by a static set of data about the model (classifier module, hyperparameters, feature list) and a user-supplied list of keys that must correspond to some key in the matrix metadata (See end of 'Retrieving Data and Saving Completed Matrix' section). This data is stored in the \nresults.model_groups\n table, along with a \nmodel_group_id\n that is used as a foreign key in the \nresults.models\n table.\n\n\nModel Hash\n\u00b6\n\n\nEach trained model is assigned a hash, for the purpose of uniquely defining and caching the model. This hash is based on the training matrix metadata, classifier path, hyperparameters (except those which concern execution and do not affect results of the classifier, such as \nn_jobs\n), and the given project path for the Experiment. This hash can be found in each row of the \nresults.models\n table. It is enforced as a unique key in the table.\n\n\nGlobal Feature Importance\n\u00b6\n\n\nThe training phase also writes global feature importances to the database, in the \nresults.feature_importances\n table. A few methods are queried to attempt to compute feature importances:\n\n The bulk of these are computed using the trained model's \n.feature_importances_\n attribute, if it exists.\n\n For sklearn's \nSVC\n models with a linear kernel, the model's \n.coef_.squeeze()\n is used. \n\n For sklearn's LogisticRegression models, \nnp.exp(model.coef_).squeeze()\n is used.\n\n Otherwise, no feature importances are written.\n\n\nTest Matrix\n\u00b6\n\n\nFor each test matrix, predictions, individual importances, and evaluation metrics are written to the database.\n\n\nPredictions\n\u00b6\n\n\nThe trained model's prediction probabilities (\npredict_proba()\n) are computed and saved for the test matrix. More specifically, \npredict_proba\n returns the probabilities for each label (false and true), but in this case only the probabilities for the true label are saved in the \nresults.predictions\n table. The \nentity_id\n and \nas_of_date\n are retrieved from the matrix's index, and stored in the database table along with the probability score, label value (if it has one), as well as other metadata.\n\n\nIndividual Feature Importance\n\u00b6\n\n\nFeature importances (of a configurable number of top features, defaulting to 5) for each prediction are computed and written to the \nresults.individual_importances\n table. Right now, there are no sophisticated calculation methods integrated into the experiment; simply the top 5 global feature importances for the model are copied to the \nindividual_importances\n table.\n\n\nMetrics\n\u00b6\n\n\nEvaluation metrics, such as precision and recall at various thresholds, are written to the \nresults.evaluations\n table. Triage defines a number of \nEvaluation Metrics\n metrics that can be addressed by name in the experiment definition, along with a list of thresholds and/or other parameters (such as the 'beta' value for fbeta) to iterate through. Thresholding is done either via absolute value (top k) or percentile. Thresholding is done by sorting the predictions and labels by the row's score, with ties broken at random (the random seed can be passed in the config file to make this deterministic), and only considering the first n rows that fall before the configured threshold.\n\n\nSometimes test matrices may not have labels for every row, so it's worth mentioning here how that is handled and interacts with thresholding. Rows with missing labels are not considered in the metric calculations, and if some of these rows are in the top k of the test matrix, no more rows are taken from the rest of the list for consideration. So if the experiment is calculating precision at the top 100 rows, and 40 of the top 100 rows are missing a label, the precision will actually be calculated on the 60 of the top 100 rows that do have a label. To make the results of this more transparent for users, a few extra pieces of metadata are written to the evaluations table for each metric score.\n\n\n\n\nnum_labeled_examples\n - The number of rows in the test matrix that have labels\n\n\nnum_labeled_above_threshold\n - The number of rows above the configured threshold for this metric score that have labels\n\n\nnum_positive_labels\n - The number of positive labels in the test matrix\n\n\n\n\nRecap\n\u00b6\n\n\nAt this point, the \nresults\n database schema is fully populated with data about models, model groups, predictions, feature importances, and evaluation metrics for the researcher to query. In addition, the trained model pickle files are saved in the configured project path. The experiment is considered finished.",
            "title": "Experiment Algorithm"
        },
        {
            "location": "/experiments/algorithm/#experiment-algorithm-deep-dive",
            "text": "This guide's purpose is to provide familiarity of the inner workings of a Triage Experiment to people with some experience in data science and Python. A Triage Experiment is a highly structured way of defining the experimentation phase of a data science project. To those wondering whether this Experiment structure is flexible enough to fit their needs, this should help.",
            "title": "Experiment Algorithm Deep Dive"
        },
        {
            "location": "/experiments/algorithm/#1-temporal-validation-setup",
            "text": "First, the given  temporal_config  section in the experiment definition is transformed into train and test splits, including  as_of_times  for each matrix.  We create these splits by figuring out the latest reasonable split time from the inputs, and moving backwards in time at the rate of the given  model_update_frequency , until we get to the earliest reasonable split time.  For each split, we create  as_of_times  by moving either backwards from the split time towards the  max_training_history  (for train matrices) or forwards from the split time towards the  test_duration  (for test matrices) at the provided  data_frequency .  Many of these configured values may be lists, in which case we generated the cross-product of all the possible values and generate more splits.  For a more detailed look at the temporal validation logic, see  Temporal Validation Deep Dive .  The train and test splits themselves are not used until the  Building Matrices  section, but a flat list of all computed  as_of_times  for all matrices needed in the experiment is used in the next section,  Transforming Data .",
            "title": "1. Temporal Validation Setup"
        },
        {
            "location": "/experiments/algorithm/#2-transforming-data",
            "text": "With all of the  as_of_times  for this Experiment now computed, it's now possible to transform the input data into features and labels as of all the required times.",
            "title": "2. Transforming Data"
        },
        {
            "location": "/experiments/algorithm/#labels",
            "text": "The Experiment transforms event outcomes data from the  events_table  into a binary labels table. It does this assuming that, if any event outcome within a given  label_timespan  after a given  as_of_time  is true, that  as_of_time  will be assigned it a true label.  This binary labels table is scoped to the entire Experiment, so all  as_of_time  (computed in step 1) and  label_timespan  (taken straight from  temporal_config ) combinations are present. Individual matrices will just select what they need from this table.",
            "title": "Labels"
        },
        {
            "location": "/experiments/algorithm/#state-table",
            "text": "The Experiment keeps track of what states any given entities are in to, based on configuration, include only certain entities for different time periods in matrices and in imputation.  In code, it does this by computing what it calls the 'sparse' state table for an experiment. This is a table with a boolean flag entry for every entity, as_of_time, and state. The structure of this table allows for state filtering based on SQL conditions given by the user.  Based on configuration, it can get created through one of two code paths:    If the user passes what we call a 'dense states' table, with the following structure: entity id/state/start/end, and a list of state filters. This 'dense states' table basically holds time ranges that entities were in specific states. When converting this to a sparse table, we take each as_of_time present in the Experiment, and for each known state (that is, the distinct values found in the 'dense states' table), see if there is any entry in the dense states table with this state whose range overlaps this as_of_time. If so, the entity is considered to be in that state as of that date.    If the user doesn't pass a dense states table, we use the events table to create a default one. It will simply use all entities present in the events table, and mark them as 'active' for every as_of_time in the experiment.    This table is created and exists until matrices are built, at which point it is considered unnecessary and then dropped.",
            "title": "State Table"
        },
        {
            "location": "/experiments/algorithm/#features",
            "text": "Each provided  feature_aggregation  configures the creation and population of several feature tables in the 'features' schema: one for each of the groups specified in the config, one that merges the groups together into one table, and one that fills in null values from the merged table with imputed values based on imputation config.",
            "title": "Features"
        },
        {
            "location": "/experiments/algorithm/#generating-aggregation-sql",
            "text": "To generate the SQL that creates the pre-imputation table, the Experiment assembles building blocks from the feature aggregation config, as well as the experiment's list of  as_of_times :   from_obj  represents, well, the object of the FROM clause in the SQL query. Often this is just a table, but can be configured to be a subquery. This holds all the data that we want to aggregate into features  Each  as_of_time  in the experiment and  interval  in the  feature_aggregation  is combined with the  knowledge_date_column  to create a WHERE clause representing a valid window of events to aggregate in the  from_obj : e.g ( where {knowledge_date_column} >= {as_of_time} - interval {interval} )  Each  aggregate ,  categorical , or  array_categorical  represents a SELECT clause. For aggregates, the  quantity  is a column or SQL expression representing a numeric quantity present in the  from_obj , and the  metrics  are any number of aggregate functions we want to use. The aggregate function is applied to the quantity.  Each  group  is a column applied to the GROUP BY clause. Generally this is 'entity_id', but higher-level groupings (for instance, 'zip_code') can be used as long as they can be rolled up to 'entity_id'.   So a simplified version of a typical query would look like:  SELECT {group}, {metric}({quantity})\nFROM {from_obj}\nWHERE {knowledge_date_column} >= {as_of_time} - interval {interval}\nGROUP BY {group}",
            "title": "Generating Aggregation SQL"
        },
        {
            "location": "/experiments/algorithm/#writing-group-wide-feature-tables",
            "text": "For each  as_of_time , the results from the generated query are written to a table whose name is prefixed with the  prefix , and suffixed with the  group . For instance, if the configuration specifies zipcode-level aggregates and entity-level aggregates, there will be a table for each, keyed on its group plus the as_of_date.",
            "title": "Writing Group-wide Feature Tables"
        },
        {
            "location": "/experiments/algorithm/#merging-into-aggregation-wide-feature-tables",
            "text": "Each generated group table is combined into one representing the whole aggregation with a left join. Given that the groups originally came from the same table (the  from_obj  of the aggregation) and therefore we know the zipcode for each entity, what we do now is create a table that would be keyed on entity and as_of_date, and contain all entity-level and zipcode-level aggregates from both tables. This aggregation-level table represents all of the features in the aggregation, pre-imputation. Its output location is generally  {prefix}_aggregation",
            "title": "Merging into Aggregation-wide Feature Tables"
        },
        {
            "location": "/experiments/algorithm/#imputing-values",
            "text": "A table that looks similar, but with imputed values is created. The state table from above is passed into collate as the comprehensive set of entities and dates for which output should be generated, regardless if they exist in the  from_obj . Each feature column has an imputation rule, inherited from some level of the feature definition. The imputation rules that are based on data (e.g.  mean ) use the rows from the  as_of_time  to produce the imputed value. Its output location is generally  {prefix}_aggregation_imputed",
            "title": "Imputing Values"
        },
        {
            "location": "/experiments/algorithm/#recap",
            "text": "At this point, we have at least three tables that are used to populate matrices:   labels  with computed labels  tmp_states_{experiment hash}  that tracks what  as_of_times  each entity was in each state.  A  features.{prefix}_aggregation_imputed  table for each feature aggregation present in the experiment config.",
            "title": "Recap"
        },
        {
            "location": "/experiments/algorithm/#3-building-matrices",
            "text": "At this point, we have to build actual train and test matrices that can be processed by machine learning algorithms.  But to do this, we have to figure out exactly what matrices we have to build. The split definitions from step 1 are a good start -- they are our train and test splits -- but sometimes we also want to test different subsets of the data, like feature groups (e.g. 'how does using group of features A perform against using all features?'). So there's a layer of iteration we introduce for each split, that may produce many more matrices.  What do we iterate over?  Feature List - All subsets of features that the user wants to cycle through. This is the end result of the feature group generation and mixing process, which is described more below.  States - All configured  state_filters  in the experiment config. These take the form of boolean SQL clauses that are applied to the sparse states table, and the purpose of this is to test different cohorts against each other. Generally there is just one here.  Label names - In theory we can take in different labels (e.g. complaints, sustained complaints) in the same experiment. Right now this isn't done, there is one label name and it is 'outcome'.  Label types - In theory we can take in different label types (e.g. binary) in the same experiment. Right now this isn't done, there is one label type and it is 'binary'.",
            "title": "3. Building Matrices"
        },
        {
            "location": "/experiments/algorithm/#feature-lists",
            "text": "How do we arrive at the feature lists? There are two pieces of config that are used:  feature group_definition  and  feature_group_strategies . Feature group definitions are just ways to define logical blocks of features, most often features that come from the same source, or describing a particular type of event. These groups within the experiment as a list of feature names, representing some subset of all potential features for the experiment. Feature group strategies are ways to take feature groups and mix them together in various ways. The feature group strategies take these subsets of features and convert them into another list of subsets of features, which is the final list iterated over to create different matrices.",
            "title": "Feature Lists"
        },
        {
            "location": "/experiments/algorithm/#feature-group-definition",
            "text": "Feature groups, at present, can be defined as either a  prefix  (the prefix of the feature name), a  table  (the feature table that the feature resides in), or  all  (all features).  Each argument is passed as a list, and each entry in the list is interpreted as a group. So, a feature group config of  {'table': ['complaints_aggregate_imputed', 'incidents_aggregate_imputed']}  would result in two feature groups: one with all the features in  complaints_aggregate_imputed , and one with all the features in  incidents_aggregate_imputed . Note that this requires a bit of knowledge on the user's part of how the feature table names will be constructed.  prefix  works on the prefix of the feature name as it exists in the database. So this also requires some knowledge of how these get created. The general format is:  {aggregation_prefix}_{group}_{timeperiod}_{quantity} , so with some knowledge the user can create groups with the aggregation's configured prefix (common), or the aggregations configured prefix + group (in case they want to compare, for instance, zip-code level features versus entity level features).   all , with a single value of  True , will include a feature group with all defined features. If no feature group definition is sent, this is the default.  Either way, at the end of this process the experiment will be aware of some list of feature groups, even if the list is just length 1 with all features as one group.",
            "title": "Feature Group Definition"
        },
        {
            "location": "/experiments/algorithm/#feature-group-mixing",
            "text": "A few basic feature group mixing strategies are implemented:  leave-one-in ,  leave-one-out , and  all . These are sent in the experiment definition as a list, so different strategies can be tried in the same experiment. Each included strategy will be applied to the list of feature groups from the previous step, to convert them into  For instance, 'leave-one-in' will cycle through each feature group, and for each one create a list of features that just represents that feature group, so for some matrices we would only use features from that particular group.  leave-one-out  does the opposite, for each feature group creating a list of features that includes all other feature groups but that one.  all  just creates a list of features that represents all feature groups together.",
            "title": "Feature Group Mixing"
        },
        {
            "location": "/experiments/algorithm/#iteration-and-matrix-creation",
            "text": "At this point, matrices are created by looping through all train/test splits and data subsets (e.g. feature groups, state definitions), grabbing the data corresponding to each from the database, and assembling that data into a design matrix that is saved along with the metadata that defines it.  As an example, if the experiment defines 3 train/test splits (one test per train in this example, for simplicity), 3 feature groups that are mixed using the 'leave-one-out' and 'all' strategies, and 1 state definition, we'll expect 18 matrices to be saved: 9 splits after multiplying the time splits by the feature groups, and each one creating a train and test matrix.",
            "title": "Iteration and Matrix Creation"
        },
        {
            "location": "/experiments/algorithm/#retrieving-data-and-saving-completed-matrix",
            "text": "How do we get the data for an individual matrix out of the database?    Create an entity-date table for this specific matrix. If it is a test matrix, the table is made up of all valid entity dates. These dates come from the entity-date-state table for the experiment, filtered down to the entity-date pairs that match both  the state filter and the list of as-of-dates for this matrix . If it is a train matrix, the table is made up of all valid  and labeled  entity dates. The same valid filter used in test matrices applies, but it also joins with the labels table for this experiment on the label name, label type, and label timespan to filter out unlabeled examples.    Write features data from tables to disk in CSV format using a COPY command, table by table. Each table is joined with the matrix-specific entity-date table to only include the desired rows.    Write labels data to disk in CSV format using a COPY command. It is joined with the matrix-specific entity-date table to only include the desired rows.    Merge the features and labels CSV files horizontally, in pandas. They are expected to be of the same shape, which is enforced by the entity-date table. The resulting matrix is indexed on  entity_id  and  as_of_date , and then saved to disk (in CSV format, more formats to come) along with its metadata: time, feature, label, index, and state information. along with any user metadata the experiment config specified. The filename is decided by a hash of this metadata, and the metadata is saved in a YAML file with the same hash and directory.    Matrix metadata reference:\n-  Train matrix temporal info \n-  Test matrix temporal info \n-  Feature, label, index, state, user metadata",
            "title": "Retrieving Data and Saving Completed Matrix"
        },
        {
            "location": "/experiments/algorithm/#recap_1",
            "text": "At this point, all finished matrices and metadata will be saved under the  project_path  supplied by the user to the Experiment constructor, in the subdirectory  matrices .",
            "title": "Recap"
        },
        {
            "location": "/experiments/algorithm/#4-running-models",
            "text": "The last phase of an Experiment run uses the completed design matrices to train, test, and evaluate classifiers. This procedure writes a lot of metadata to the 'results' schema.",
            "title": "4. Running Models"
        },
        {
            "location": "/experiments/algorithm/#train",
            "text": "Each matrix marked for training is sent through the configured grid in the experiment's  grid_config . This works much like the scikit-learn  ParameterGrid  (and in fact uses it on the backend). It cycles through all of the classifiers and hyperparameter combinations contained herein, and calls  .fit()  with that train matrix. Any classifier that adheres to the scikit-learn  .fit/.transform  interface and is available in the Python environment will work here, whether it is a standard scikit-learn classifier, a third-party library like XGBoost, or a custom-built one in the calling repository (for instance, one that implements the problem domain's baseline heuristic algorithm for comparison).  Metadata about the trained classifier is written to the  results.models  Postgres table. The trained model is saved to a filename with the model hash (see Model Hash section below).",
            "title": "Train"
        },
        {
            "location": "/experiments/algorithm/#model-groups",
            "text": "Each model is assigned a 'model group'. A model group represents a number of trained classifiers that we want to treat as equivalent by some criteria. By default, this is aimed at defining models which are equivalent across time splits, to make analyzing model stability easier. The experiment defines model groups by a static set of data about the model (classifier module, hyperparameters, feature list) and a user-supplied list of keys that must correspond to some key in the matrix metadata (See end of 'Retrieving Data and Saving Completed Matrix' section). This data is stored in the  results.model_groups  table, along with a  model_group_id  that is used as a foreign key in the  results.models  table.",
            "title": "Model Groups"
        },
        {
            "location": "/experiments/algorithm/#model-hash",
            "text": "Each trained model is assigned a hash, for the purpose of uniquely defining and caching the model. This hash is based on the training matrix metadata, classifier path, hyperparameters (except those which concern execution and do not affect results of the classifier, such as  n_jobs ), and the given project path for the Experiment. This hash can be found in each row of the  results.models  table. It is enforced as a unique key in the table.",
            "title": "Model Hash"
        },
        {
            "location": "/experiments/algorithm/#global-feature-importance",
            "text": "The training phase also writes global feature importances to the database, in the  results.feature_importances  table. A few methods are queried to attempt to compute feature importances:  The bulk of these are computed using the trained model's  .feature_importances_  attribute, if it exists.  For sklearn's  SVC  models with a linear kernel, the model's  .coef_.squeeze()  is used.   For sklearn's LogisticRegression models,  np.exp(model.coef_).squeeze()  is used.  Otherwise, no feature importances are written.",
            "title": "Global Feature Importance"
        },
        {
            "location": "/experiments/algorithm/#test-matrix",
            "text": "For each test matrix, predictions, individual importances, and evaluation metrics are written to the database.",
            "title": "Test Matrix"
        },
        {
            "location": "/experiments/algorithm/#predictions",
            "text": "The trained model's prediction probabilities ( predict_proba() ) are computed and saved for the test matrix. More specifically,  predict_proba  returns the probabilities for each label (false and true), but in this case only the probabilities for the true label are saved in the  results.predictions  table. The  entity_id  and  as_of_date  are retrieved from the matrix's index, and stored in the database table along with the probability score, label value (if it has one), as well as other metadata.",
            "title": "Predictions"
        },
        {
            "location": "/experiments/algorithm/#individual-feature-importance",
            "text": "Feature importances (of a configurable number of top features, defaulting to 5) for each prediction are computed and written to the  results.individual_importances  table. Right now, there are no sophisticated calculation methods integrated into the experiment; simply the top 5 global feature importances for the model are copied to the  individual_importances  table.",
            "title": "Individual Feature Importance"
        },
        {
            "location": "/experiments/algorithm/#metrics",
            "text": "Evaluation metrics, such as precision and recall at various thresholds, are written to the  results.evaluations  table. Triage defines a number of  Evaluation Metrics  metrics that can be addressed by name in the experiment definition, along with a list of thresholds and/or other parameters (such as the 'beta' value for fbeta) to iterate through. Thresholding is done either via absolute value (top k) or percentile. Thresholding is done by sorting the predictions and labels by the row's score, with ties broken at random (the random seed can be passed in the config file to make this deterministic), and only considering the first n rows that fall before the configured threshold.  Sometimes test matrices may not have labels for every row, so it's worth mentioning here how that is handled and interacts with thresholding. Rows with missing labels are not considered in the metric calculations, and if some of these rows are in the top k of the test matrix, no more rows are taken from the rest of the list for consideration. So if the experiment is calculating precision at the top 100 rows, and 40 of the top 100 rows are missing a label, the precision will actually be calculated on the 60 of the top 100 rows that do have a label. To make the results of this more transparent for users, a few extra pieces of metadata are written to the evaluations table for each metric score.   num_labeled_examples  - The number of rows in the test matrix that have labels  num_labeled_above_threshold  - The number of rows above the configured threshold for this metric score that have labels  num_positive_labels  - The number of positive labels in the test matrix",
            "title": "Metrics"
        },
        {
            "location": "/experiments/algorithm/#recap_2",
            "text": "At this point, the  results  database schema is fully populated with data about models, model groups, predictions, feature importances, and evaluation metrics for the researcher to query. In addition, the trained model pickle files are saved in the configured project path. The experiment is considered finished.",
            "title": "Recap"
        },
        {
            "location": "/experiments/architecture/",
            "text": "Experiment Architecture\n\u00b6\n\n\nThis doc is coming soon",
            "title": "Experiment Architecture"
        },
        {
            "location": "/experiments/architecture/#experiment-architecture",
            "text": "This doc is coming soon",
            "title": "Experiment Architecture"
        },
        {
            "location": "/triage.experiments.base/",
            "text": "Source:\n \ntriage/experiments/base.py#L0\n\n\nGlobal Variables\n\u00b6\n\n\n\n\nCONFIG_VERSION\n\n\n\n\n\n\ndt_from_str\n\u00b6\n\n\ndt_from_str(dt_str)\n\n\n\n\n\n\nExperimentBase\n\u00b6\n\n\nThe Base class for all Experiments.\n\n\nExperimentBase.all_as_of_times\n\u00b6\n\n\nAll 'as of times' in experiment config\n\n\nUsed for label and feature generation.\n\n\nReturns: (list) of datetimes\n\n\nExperimentBase.all_label_windows\n\u00b6\n\n\nAll train and test label windows\n\n\nReturns: (list) label windows, in string form as they appeared in the experiment config\n\n\nExperimentBase.collate_aggregations\n\u00b6\n\n\ncollate Aggregation objects used by this experiment.\n\n\nReturns: (list) of collate.Aggregation objects\n\n\nExperimentBase.feature_dicts\n\u00b6\n\n\nFeature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nExperimentBase.feature_table_tasks\n\u00b6\n\n\nAll feature table query tasks specified by this Experiment\n\n\nReturns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands\n\n\nExperimentBase.full_matrix_definitions\n\u00b6\n\n\nFull matrix definitions\n\n\nReturns: (list) temporal and feature information for each matrix\n\n\nExperimentBase.master_feature_dictionary\n\u00b6\n\n\nAll possible features found in the database. Not all features will necessarily end up in matrices\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nExperimentBase.matrix_build_tasks\n\u00b6\n\n\nTasks for all matrices that need to be built as a part of this Experiment.\n\n\nEach task contains arguments understood by Architect.build_matrix\n\n\nReturns: (list) of dicts\n\n\nExperimentBase.split_definitions\n\u00b6\n\n\nTemporal splits based on the experiment's configuration\n\n\nReturns: (dict) temporal splits\n\n\nExample:\n\n\n{\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}\n\n\n\n\n\n\nExperimentBase.\n__init__\n\u00b6\n\n\n__init__(self, config, db_engine, model_storage_class=None, project_path=None, replace=True)\n\n\n\n\nInitialize self.  See help(type(self)) for accurate signature.\n\n\n\n\nExperimentBase.build_matrices\n\u00b6\n\n\nbuild_matrices(self)\n\n\n\n\nGenerate labels, features, and matrices\n\n\n\n\nExperimentBase.catwalk\n\u00b6\n\n\ncatwalk(self)\n\n\n\n\nTrain, test, and evaluate models\n\n\n\n\nExperimentBase.generate_labels\n\u00b6\n\n\ngenerate_labels(self)\n\n\n\n\nGenerate labels based on experiment configuration\n\n\nResults are stored in the database, not returned\n\n\n\n\nExperimentBase.generate_sparse_states\n\u00b6\n\n\ngenerate_sparse_states(self)\n\n\n\n\n\n\nExperimentBase.initialize_components\n\u00b6\n\n\ninitialize_components(self)\n\n\n\n\n\n\nExperimentBase.initialize_factories\n\u00b6\n\n\ninitialize_factories(self)\n\n\n\n\n\n\nExperimentBase.log_split\n\u00b6\n\n\nlog_split(self, split_num, split)\n\n\n\n\n\n\nExperimentBase.matrix_store\n\u00b6\n\n\nmatrix_store(self, matrix_uuid)\n\n\n\n\nConstruct a matrix store for a given matrix uuid, using the Experiment's #matrix_store_class\n\n\nArgs:\n\n\nmatrix_uuid (string) A uuid for a matrix\n\n\n\n\nExperimentBase.run\n\u00b6\n\n\nrun(self)\n\n\n\n\n\n\nExperimentBase.update_split_definitions\n\u00b6\n\n\nupdate_split_definitions(self, new_split_definitions)\n\n\n\n\nUpdate split definitions\n\n\nArgs: (dict) split definitions (should have matrix uuids)",
            "title": "ExperimentBase"
        },
        {
            "location": "/triage.experiments.base/#global-variables",
            "text": "CONFIG_VERSION",
            "title": "Global Variables"
        },
        {
            "location": "/triage.experiments.base/#dt_from_str",
            "text": "dt_from_str(dt_str)",
            "title": "dt_from_str"
        },
        {
            "location": "/triage.experiments.base/#experimentbase",
            "text": "The Base class for all Experiments.",
            "title": "ExperimentBase"
        },
        {
            "location": "/triage.experiments.base/#experimentbaseall_as_of_times",
            "text": "All 'as of times' in experiment config  Used for label and feature generation.  Returns: (list) of datetimes",
            "title": "ExperimentBase.all_as_of_times"
        },
        {
            "location": "/triage.experiments.base/#experimentbaseall_label_windows",
            "text": "All train and test label windows  Returns: (list) label windows, in string form as they appeared in the experiment config",
            "title": "ExperimentBase.all_label_windows"
        },
        {
            "location": "/triage.experiments.base/#experimentbasecollate_aggregations",
            "text": "collate Aggregation objects used by this experiment.  Returns: (list) of collate.Aggregation objects",
            "title": "ExperimentBase.collate_aggregations"
        },
        {
            "location": "/triage.experiments.base/#experimentbasefeature_dicts",
            "text": "Feature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "ExperimentBase.feature_dicts"
        },
        {
            "location": "/triage.experiments.base/#experimentbasefeature_table_tasks",
            "text": "All feature table query tasks specified by this Experiment  Returns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands",
            "title": "ExperimentBase.feature_table_tasks"
        },
        {
            "location": "/triage.experiments.base/#experimentbasefull_matrix_definitions",
            "text": "Full matrix definitions  Returns: (list) temporal and feature information for each matrix",
            "title": "ExperimentBase.full_matrix_definitions"
        },
        {
            "location": "/triage.experiments.base/#experimentbasemaster_feature_dictionary",
            "text": "All possible features found in the database. Not all features will necessarily end up in matrices  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "ExperimentBase.master_feature_dictionary"
        },
        {
            "location": "/triage.experiments.base/#experimentbasematrix_build_tasks",
            "text": "Tasks for all matrices that need to be built as a part of this Experiment.  Each task contains arguments understood by Architect.build_matrix  Returns: (list) of dicts",
            "title": "ExperimentBase.matrix_build_tasks"
        },
        {
            "location": "/triage.experiments.base/#experimentbasesplit_definitions",
            "text": "Temporal splits based on the experiment's configuration  Returns: (dict) temporal splits  Example:  {\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}",
            "title": "ExperimentBase.split_definitions"
        },
        {
            "location": "/triage.experiments.base/#experimentbase__init__",
            "text": "__init__(self, config, db_engine, model_storage_class=None, project_path=None, replace=True)  Initialize self.  See help(type(self)) for accurate signature.",
            "title": "ExperimentBase.__init__"
        },
        {
            "location": "/triage.experiments.base/#experimentbasebuild_matrices",
            "text": "build_matrices(self)  Generate labels, features, and matrices",
            "title": "ExperimentBase.build_matrices"
        },
        {
            "location": "/triage.experiments.base/#experimentbasecatwalk",
            "text": "catwalk(self)  Train, test, and evaluate models",
            "title": "ExperimentBase.catwalk"
        },
        {
            "location": "/triage.experiments.base/#experimentbasegenerate_labels",
            "text": "generate_labels(self)  Generate labels based on experiment configuration  Results are stored in the database, not returned",
            "title": "ExperimentBase.generate_labels"
        },
        {
            "location": "/triage.experiments.base/#experimentbasegenerate_sparse_states",
            "text": "generate_sparse_states(self)",
            "title": "ExperimentBase.generate_sparse_states"
        },
        {
            "location": "/triage.experiments.base/#experimentbaseinitialize_components",
            "text": "initialize_components(self)",
            "title": "ExperimentBase.initialize_components"
        },
        {
            "location": "/triage.experiments.base/#experimentbaseinitialize_factories",
            "text": "initialize_factories(self)",
            "title": "ExperimentBase.initialize_factories"
        },
        {
            "location": "/triage.experiments.base/#experimentbaselog_split",
            "text": "log_split(self, split_num, split)",
            "title": "ExperimentBase.log_split"
        },
        {
            "location": "/triage.experiments.base/#experimentbasematrix_store",
            "text": "matrix_store(self, matrix_uuid)  Construct a matrix store for a given matrix uuid, using the Experiment's #matrix_store_class  Args:  matrix_uuid (string) A uuid for a matrix",
            "title": "ExperimentBase.matrix_store"
        },
        {
            "location": "/triage.experiments.base/#experimentbaserun",
            "text": "run(self)",
            "title": "ExperimentBase.run"
        },
        {
            "location": "/triage.experiments.base/#experimentbaseupdate_split_definitions",
            "text": "update_split_definitions(self, new_split_definitions)  Update split definitions  Args: (dict) split definitions (should have matrix uuids)",
            "title": "ExperimentBase.update_split_definitions"
        },
        {
            "location": "/triage.experiments.singlethreaded/",
            "text": "Source:\n \ntriage/experiments/singlethreaded.py#L0\n\n\n\n\nSingleThreadedExperiment\n\u00b6\n\n\nThe Base class for all Experiments.\n\n\nSingleThreadedExperiment.all_as_of_times\n\u00b6\n\n\nAll 'as of times' in experiment config\n\n\nUsed for label and feature generation.\n\n\nReturns: (list) of datetimes\n\n\nSingleThreadedExperiment.all_label_windows\n\u00b6\n\n\nAll train and test label windows\n\n\nReturns: (list) label windows, in string form as they appeared in the experiment config\n\n\nSingleThreadedExperiment.collate_aggregations\n\u00b6\n\n\ncollate Aggregation objects used by this experiment.\n\n\nReturns: (list) of collate.Aggregation objects\n\n\nSingleThreadedExperiment.feature_dicts\n\u00b6\n\n\nFeature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nSingleThreadedExperiment.feature_table_tasks\n\u00b6\n\n\nAll feature table query tasks specified by this Experiment\n\n\nReturns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands\n\n\nSingleThreadedExperiment.full_matrix_definitions\n\u00b6\n\n\nFull matrix definitions\n\n\nReturns: (list) temporal and feature information for each matrix\n\n\nSingleThreadedExperiment.master_feature_dictionary\n\u00b6\n\n\nAll possible features found in the database. Not all features will necessarily end up in matrices\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nSingleThreadedExperiment.matrix_build_tasks\n\u00b6\n\n\nTasks for all matrices that need to be built as a part of this Experiment.\n\n\nEach task contains arguments understood by Architect.build_matrix\n\n\nReturns: (list) of dicts\n\n\nSingleThreadedExperiment.split_definitions\n\u00b6\n\n\nTemporal splits based on the experiment's configuration\n\n\nReturns: (dict) temporal splits\n\n\nExample:\n\n\n{\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}\n\n\n\n\n\n\nSingleThreadedExperiment.\n__init__\n\u00b6\n\n\n__init__(self, config, db_engine, model_storage_class=None, project_path=None, replace=True)\n\n\n\n\nInitialize self.  See help(type(self)) for accurate signature.\n\n\n\n\nSingleThreadedExperiment.build_matrices\n\u00b6\n\n\nbuild_matrices(self)\n\n\n\n\nGenerate labels, features, and matrices\n\n\n\n\nSingleThreadedExperiment.catwalk\n\u00b6\n\n\ncatwalk(self)\n\n\n\n\nTrain, test, and evaluate models",
            "title": "SingleThreadedExperiment"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperiment",
            "text": "The Base class for all Experiments.",
            "title": "SingleThreadedExperiment"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentall_as_of_times",
            "text": "All 'as of times' in experiment config  Used for label and feature generation.  Returns: (list) of datetimes",
            "title": "SingleThreadedExperiment.all_as_of_times"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentall_label_windows",
            "text": "All train and test label windows  Returns: (list) label windows, in string form as they appeared in the experiment config",
            "title": "SingleThreadedExperiment.all_label_windows"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentcollate_aggregations",
            "text": "collate Aggregation objects used by this experiment.  Returns: (list) of collate.Aggregation objects",
            "title": "SingleThreadedExperiment.collate_aggregations"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentfeature_dicts",
            "text": "Feature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "SingleThreadedExperiment.feature_dicts"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentfeature_table_tasks",
            "text": "All feature table query tasks specified by this Experiment  Returns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands",
            "title": "SingleThreadedExperiment.feature_table_tasks"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentfull_matrix_definitions",
            "text": "Full matrix definitions  Returns: (list) temporal and feature information for each matrix",
            "title": "SingleThreadedExperiment.full_matrix_definitions"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentmaster_feature_dictionary",
            "text": "All possible features found in the database. Not all features will necessarily end up in matrices  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "SingleThreadedExperiment.master_feature_dictionary"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentmatrix_build_tasks",
            "text": "Tasks for all matrices that need to be built as a part of this Experiment.  Each task contains arguments understood by Architect.build_matrix  Returns: (list) of dicts",
            "title": "SingleThreadedExperiment.matrix_build_tasks"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentsplit_definitions",
            "text": "Temporal splits based on the experiment's configuration  Returns: (dict) temporal splits  Example:  {\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}",
            "title": "SingleThreadedExperiment.split_definitions"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperiment__init__",
            "text": "__init__(self, config, db_engine, model_storage_class=None, project_path=None, replace=True)  Initialize self.  See help(type(self)) for accurate signature.",
            "title": "SingleThreadedExperiment.__init__"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentbuild_matrices",
            "text": "build_matrices(self)  Generate labels, features, and matrices",
            "title": "SingleThreadedExperiment.build_matrices"
        },
        {
            "location": "/triage.experiments.singlethreaded/#singlethreadedexperimentcatwalk",
            "text": "catwalk(self)  Train, test, and evaluate models",
            "title": "SingleThreadedExperiment.catwalk"
        },
        {
            "location": "/triage.experiments.multicore/",
            "text": "Source:\n \ntriage/experiments/multicore.py#L0\n\n\n\n\ninsert_into_table\n\u00b6\n\n\ninsert_into_table(insert_statements, feature_generator_factory, db_connection_string)\n\n\n\n\n\n\nbuild_matrix\n\u00b6\n\n\nbuild_matrix(build_tasks, planner_factory, db_connection_string)\n\n\n\n\n\n\ntrain_model\n\u00b6\n\n\ntrain_model(train_tasks, trainer_factory, db_connection_string)\n\n\n\n\n\n\ntest_and_evaluate\n\u00b6\n\n\ntest_and_evaluate(model_ids, predictor_factory, evaluator_factory, indiv_importance_factory, \\\n    test_store, db_connection_string, split_def, train_matrix_columns, config)\n\n\n\n\n\n\nMultiCoreExperiment\n\u00b6\n\n\nThe Base class for all Experiments.\n\n\nMultiCoreExperiment.all_as_of_times\n\u00b6\n\n\nAll 'as of times' in experiment config\n\n\nUsed for label and feature generation.\n\n\nReturns: (list) of datetimes\n\n\nMultiCoreExperiment.all_label_windows\n\u00b6\n\n\nAll train and test label windows\n\n\nReturns: (list) label windows, in string form as they appeared in the experiment config\n\n\nMultiCoreExperiment.collate_aggregations\n\u00b6\n\n\ncollate Aggregation objects used by this experiment.\n\n\nReturns: (list) of collate.Aggregation objects\n\n\nMultiCoreExperiment.feature_dicts\n\u00b6\n\n\nFeature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nMultiCoreExperiment.feature_table_tasks\n\u00b6\n\n\nAll feature table query tasks specified by this Experiment\n\n\nReturns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands\n\n\nMultiCoreExperiment.full_matrix_definitions\n\u00b6\n\n\nFull matrix definitions\n\n\nReturns: (list) temporal and feature information for each matrix\n\n\nMultiCoreExperiment.master_feature_dictionary\n\u00b6\n\n\nAll possible features found in the database. Not all features will necessarily end up in matrices\n\n\nReturns: (list) of dicts, keys being feature table names and values being lists of feature names\n\n\nMultiCoreExperiment.matrix_build_tasks\n\u00b6\n\n\nTasks for all matrices that need to be built as a part of this Experiment.\n\n\nEach task contains arguments understood by Architect.build_matrix\n\n\nReturns: (list) of dicts\n\n\nMultiCoreExperiment.split_definitions\n\u00b6\n\n\nTemporal splits based on the experiment's configuration\n\n\nReturns: (dict) temporal splits\n\n\nExample:\n\n\n{\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}\n\n\n\n\n\n\nMultiCoreExperiment.\n__init__\n\u00b6\n\n\n__init__(self, n_processes=1, n_db_processes=1, *args, **kwargs)\n\n\n\n\nInitialize self.  See help(type(self)) for accurate signature.\n\n\n\n\nMultiCoreExperiment.build_matrices\n\u00b6\n\n\nbuild_matrices(self)\n\n\n\n\nGenerate labels, features, and matrices\n\n\n\n\nMultiCoreExperiment.catwalk\n\u00b6\n\n\ncatwalk(self)\n\n\n\n\nTrain, test, and evaluate models\n\n\n\n\nMultiCoreExperiment.parallelize\n\u00b6\n\n\nparallelize(self, partially_bound_function, tasks, n_processes, chunksize=1)\n\n\n\n\n\n\nMultiCoreExperiment.parallelize_with_success_count\n\u00b6\n\n\nparallelize_with_success_count(self, partially_bound_function, tasks, n_processes, chunksize=1)",
            "title": "MultiCoreExperiment"
        },
        {
            "location": "/triage.experiments.multicore/#insert_into_table",
            "text": "insert_into_table(insert_statements, feature_generator_factory, db_connection_string)",
            "title": "insert_into_table"
        },
        {
            "location": "/triage.experiments.multicore/#build_matrix",
            "text": "build_matrix(build_tasks, planner_factory, db_connection_string)",
            "title": "build_matrix"
        },
        {
            "location": "/triage.experiments.multicore/#train_model",
            "text": "train_model(train_tasks, trainer_factory, db_connection_string)",
            "title": "train_model"
        },
        {
            "location": "/triage.experiments.multicore/#test_and_evaluate",
            "text": "test_and_evaluate(model_ids, predictor_factory, evaluator_factory, indiv_importance_factory, \\\n    test_store, db_connection_string, split_def, train_matrix_columns, config)",
            "title": "test_and_evaluate"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperiment",
            "text": "The Base class for all Experiments.",
            "title": "MultiCoreExperiment"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentall_as_of_times",
            "text": "All 'as of times' in experiment config  Used for label and feature generation.  Returns: (list) of datetimes",
            "title": "MultiCoreExperiment.all_as_of_times"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentall_label_windows",
            "text": "All train and test label windows  Returns: (list) label windows, in string form as they appeared in the experiment config",
            "title": "MultiCoreExperiment.all_label_windows"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentcollate_aggregations",
            "text": "collate Aggregation objects used by this experiment.  Returns: (list) of collate.Aggregation objects",
            "title": "MultiCoreExperiment.collate_aggregations"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentfeature_dicts",
            "text": "Feature dictionaries, representing the feature tables and columns configured in this experiment after computing feature groups.  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "MultiCoreExperiment.feature_dicts"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentfeature_table_tasks",
            "text": "All feature table query tasks specified by this Experiment  Returns: (dict) keys are group table names, values are themselves dicts, each with keys for different stages of table creation (prepare, inserts, finalize) and with values being lists of SQL commands",
            "title": "MultiCoreExperiment.feature_table_tasks"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentfull_matrix_definitions",
            "text": "Full matrix definitions  Returns: (list) temporal and feature information for each matrix",
            "title": "MultiCoreExperiment.full_matrix_definitions"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentmaster_feature_dictionary",
            "text": "All possible features found in the database. Not all features will necessarily end up in matrices  Returns: (list) of dicts, keys being feature table names and values being lists of feature names",
            "title": "MultiCoreExperiment.master_feature_dictionary"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentmatrix_build_tasks",
            "text": "Tasks for all matrices that need to be built as a part of this Experiment.  Each task contains arguments understood by Architect.build_matrix  Returns: (list) of dicts",
            "title": "MultiCoreExperiment.matrix_build_tasks"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentsplit_definitions",
            "text": "Temporal splits based on the experiment's configuration  Returns: (dict) temporal splits  Example:  {\n  'beginning_of_time': {datetime},\n  'modeling_start_time': {datetime},\n  'modeling_end_time': {datetime},\n  'train_matrix': {\n  'matrix_start_time': {datetime},\n  'matrix_end_time': {datetime},\n  'as_of_times': [list of {datetime}s]\n  },\n  'test_matrices': [list of matrix defs similar to train_matrix]\n}",
            "title": "MultiCoreExperiment.split_definitions"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperiment__init__",
            "text": "__init__(self, n_processes=1, n_db_processes=1, *args, **kwargs)  Initialize self.  See help(type(self)) for accurate signature.",
            "title": "MultiCoreExperiment.__init__"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentbuild_matrices",
            "text": "build_matrices(self)  Generate labels, features, and matrices",
            "title": "MultiCoreExperiment.build_matrices"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentcatwalk",
            "text": "catwalk(self)  Train, test, and evaluate models",
            "title": "MultiCoreExperiment.catwalk"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentparallelize",
            "text": "parallelize(self, partially_bound_function, tasks, n_processes, chunksize=1)",
            "title": "MultiCoreExperiment.parallelize"
        },
        {
            "location": "/triage.experiments.multicore/#multicoreexperimentparallelize_with_success_count",
            "text": "parallelize_with_success_count(self, partially_bound_function, tasks, n_processes, chunksize=1)",
            "title": "MultiCoreExperiment.parallelize_with_success_count"
        }
    ]
}